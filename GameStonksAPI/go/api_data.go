/*
 * API for interacting with GameStonks
 *
 * GameStonks API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	// "encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DataApiController binds http requests to an api service and writes the service results to the http response
type DataApiController struct {
	service DataApiServicer
}

// NewDataApiController creates a default api controller
func NewDataApiController(s DataApiServicer) Router {
	return &DataApiController{service: s}
}

// Routes returns all of the api route for the DataApiController
func (c *DataApiController) Routes() Routes {
	return Routes{
		{
			"GetMostVoted",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/data/most_voted",
			c.GetMostVoted,
		},
		{
			"GetStockCommentMostUsedWordsAndFrequency",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/data/comments_words/{stock_ticker}",
			c.GetStockCommentMostUsedWordsAndFrequency,
		},
		{
			"GetStockCommentPerformance",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/data/comments_trend/{stock_ticker}",
			c.GetStockCommentPerformance,
		},
		{
			"GetStockFinancialPerformance",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/data/finance/{stock_ticker}",
			c.GetStockFinancialPerformance,
		},
		{
			"GetStockVotesPerDayPerformance",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/data/votes_trend/{stock_ticker}",
			c.GetStockVotesPerDayPerformance,
		},
	}
}

// GetMostVoted - Gets all stocks on the platform within a date range
func (c *DataApiController) GetMostVoted(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	voteFloor := query.Get("vote_floor")
	since := query.Get("since")
	until := query.Get("until")
	result, err := c.service.GetMostVoted(r.Context(), voteFloor, since, until)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStockCommentMostUsedWordsAndFrequency - Get most used words in comments for a given stock
func (c *DataApiController) GetStockCommentMostUsedWordsAndFrequency(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stockTicker := params["stock_ticker"]
	result, err := c.service.GetStockCommentMostUsedWordsAndFrequency(r.Context(), stockTicker)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStockCommentPerformance - Gets stock comments per day trend
func (c *DataApiController) GetStockCommentPerformance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	stockTicker := params["stock_ticker"]
	since := query.Get("since")
	until := query.Get("until")
	result, err := c.service.GetStockCommentPerformance(r.Context(), stockTicker, since, until)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStockFinancialPerformance - Gets stock finance performance data
func (c *DataApiController) GetStockFinancialPerformance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stockTicker := params["stock_ticker"]
	result, err := c.service.GetStockFinancialPerformance(r.Context(), stockTicker)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStockVotesPerDayPerformance - Gets votes per day trend from a stock
func (c *DataApiController) GetStockVotesPerDayPerformance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	stockTicker := params["stock_ticker"]
	since := query.Get("since")
	until := query.Get("until")
	result, err := c.service.GetStockVotesPerDayPerformance(r.Context(), stockTicker, since, until)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
