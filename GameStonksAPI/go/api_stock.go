/*
 * API for interacting with GameStonks
 *
 * GameStonks API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	// "encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A StockApiController binds http requests to an api service and writes the service results to the http response
type StockApiController struct {
	service StockApiServicer
}

// NewStockApiController creates a default api controller
func NewStockApiController(s StockApiServicer) Router {
	return &StockApiController{service: s}
}

// Routes returns all of the api route for the StockApiController
func (c *StockApiController) Routes() Routes {
	return Routes{
		{
			"AddNewComment",
			strings.ToUpper("Put"),
			"/adchungcsc/gamestonks/1.0.0/stock/comment/{stock_ticker}",
			c.AddNewComment,
		},
		{
			"AddNewVote",
			strings.ToUpper("Put"),
			"/adchungcsc/gamestonks/1.0.0/stock/vote/{stock_ticker}",
			c.AddNewVote,
		},
		{
			"GetAllStocks",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/stocks",
			c.GetAllStocks,
		},
		{
			"GetIndividualStock",
			strings.ToUpper("Get"),
			"/adchungcsc/gamestonks/1.0.0/stock/{stock_ticker}",
			c.GetIndividualStock,
		},
		{
			"InsertIndividualStock",
			strings.ToUpper("Post"),
			"/adchungcsc/gamestonks/1.0.0/stock/{stock_ticker}",
			c.InsertIndividualStock,
		},
	}
}

// AddNewComment - Add a comment to a stock
func (c *StockApiController) AddNewComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stockTicker := params["stock_ticker"]
	result, err := c.service.AddNewComment(r.Context(), stockTicker)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AddNewVote - Add a vote to a stock
func (c *StockApiController) AddNewVote(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stockTicker := params["stock_ticker"]
	result, err := c.service.AddNewVote(r.Context(), stockTicker)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetAllStocks - Gets all stocks on the platform within a date range
func (c *StockApiController) GetAllStocks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	since := query.Get("since")
	until := query.Get("until")
	result, err := c.service.GetAllStocks(r.Context(), since, until)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetIndividualStock - Returns a stock's vote count and comments
func (c *StockApiController) GetIndividualStock(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stockTicker := params["stock_ticker"]
	result, err := c.service.GetIndividualStock(r.Context(), stockTicker)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// InsertIndividualStock - Create a new stock ticker for tracking
func (c *StockApiController) InsertIndividualStock(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	stockTicker := params["stock_ticker"]
	result, err := c.service.InsertIndividualStock(r.Context(), stockTicker)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
